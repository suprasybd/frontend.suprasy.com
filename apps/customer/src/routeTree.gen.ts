/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ViseditorImport } from './routes/viseditor'
import { Route as TestImport } from './routes/test'
import { Route as StoreImport } from './routes/store'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as StoreStoreKeyShippingImport } from './routes/store/$storeKey/shipping'
import { Route as StoreStoreKeyLandingImport } from './routes/store/$storeKey/landing'
import { Route as StoreStoreKeySectionCreateImport } from './routes/store/$storeKey/section_/create'
import { Route as StoreStoreKeyProductsCreateImport } from './routes/store/$storeKey/products_/create'
import { Route as StoreStoreKeyFooterCreatepageImport } from './routes/store/$storeKey/footer_/createpage'
import { Route as StoreStoreKeyOrdersOrderIdIndexImport } from './routes/store/$storeKey/orders_/$orderId/index'

// Create Virtual Routes

const ForgotpasswordLazyImport = createFileRoute('/forgotpassword')()
const AboutLazyImport = createFileRoute('/about')()
const StoreStoreKeyTurnstileLazyImport = createFileRoute(
  '/store/$storeKey/turnstile',
)()
const StoreStoreKeyProductsLazyImport = createFileRoute(
  '/store/$storeKey/products',
)()
const StoreStoreKeyPaymentsLazyImport = createFileRoute(
  '/store/$storeKey/payments',
)()
const StoreStoreKeyOrdersLazyImport = createFileRoute(
  '/store/$storeKey/orders',
)()
const StoreStoreKeyMediaLazyImport = createFileRoute('/store/$storeKey/media')()
const StoreStoreKeyInventoryLazyImport = createFileRoute(
  '/store/$storeKey/inventory',
)()
const StoreStoreKeyHomeLazyImport = createFileRoute('/store/$storeKey/home')()
const StoreStoreKeyGenlinkLazyImport = createFileRoute(
  '/store/$storeKey/genlink',
)()
const StoreStoreKeyFooterLazyImport = createFileRoute(
  '/store/$storeKey/footer',
)()
const StoreStoreKeyEmailLazyImport = createFileRoute('/store/$storeKey/email')()
const StoreStoreKeyDomainLazyImport = createFileRoute(
  '/store/$storeKey/domain',
)()
const StoreStoreKeyDashboardLazyImport = createFileRoute(
  '/store/$storeKey/dashboard',
)()
const StoreStoreKeyCustomersLazyImport = createFileRoute(
  '/store/$storeKey/customers',
)()
const StoreStoreKeyCategoriesLazyImport = createFileRoute(
  '/store/$storeKey/categories',
)()
const StoreStoreKeyBillingLazyImport = createFileRoute(
  '/store/$storeKey/billing',
)()
const StoreStoreKeyAnalyticsLazyImport = createFileRoute(
  '/store/$storeKey/analytics',
)()
const StoreStoreKeyProductsProductIdDetailsLazyImport = createFileRoute(
  '/store/$storeKey/products/$productId/details',
)()

// Create/Update Routes

const ForgotpasswordLazyRoute = ForgotpasswordLazyImport.update({
  path: '/forgotpassword',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forgotpassword.lazy').then((d) => d.Route),
)

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const ViseditorRoute = ViseditorImport.update({
  path: '/viseditor',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const StoreRoute = StoreImport.update({
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StoreStoreKeyTurnstileLazyRoute = StoreStoreKeyTurnstileLazyImport.update(
  {
    path: '/$storeKey/turnstile',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/turnstile.lazy').then((d) => d.Route),
)

const StoreStoreKeyProductsLazyRoute = StoreStoreKeyProductsLazyImport.update({
  path: '/$storeKey/products',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/products.lazy').then((d) => d.Route),
)

const StoreStoreKeyPaymentsLazyRoute = StoreStoreKeyPaymentsLazyImport.update({
  path: '/$storeKey/payments',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/payments.lazy').then((d) => d.Route),
)

const StoreStoreKeyOrdersLazyRoute = StoreStoreKeyOrdersLazyImport.update({
  path: '/$storeKey/orders',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/orders.lazy').then((d) => d.Route),
)

const StoreStoreKeyMediaLazyRoute = StoreStoreKeyMediaLazyImport.update({
  path: '/$storeKey/media',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/media.lazy').then((d) => d.Route),
)

const StoreStoreKeyInventoryLazyRoute = StoreStoreKeyInventoryLazyImport.update(
  {
    path: '/$storeKey/inventory',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/inventory.lazy').then((d) => d.Route),
)

const StoreStoreKeyHomeLazyRoute = StoreStoreKeyHomeLazyImport.update({
  path: '/$storeKey/home',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/home.lazy').then((d) => d.Route),
)

const StoreStoreKeyGenlinkLazyRoute = StoreStoreKeyGenlinkLazyImport.update({
  path: '/$storeKey/genlink',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/genlink.lazy').then((d) => d.Route),
)

const StoreStoreKeyFooterLazyRoute = StoreStoreKeyFooterLazyImport.update({
  path: '/$storeKey/footer',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/footer.lazy').then((d) => d.Route),
)

const StoreStoreKeyEmailLazyRoute = StoreStoreKeyEmailLazyImport.update({
  path: '/$storeKey/email',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/email.lazy').then((d) => d.Route),
)

const StoreStoreKeyDomainLazyRoute = StoreStoreKeyDomainLazyImport.update({
  path: '/$storeKey/domain',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/domain.lazy').then((d) => d.Route),
)

const StoreStoreKeyDashboardLazyRoute = StoreStoreKeyDashboardLazyImport.update(
  {
    path: '/$storeKey/dashboard',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/dashboard.lazy').then((d) => d.Route),
)

const StoreStoreKeyCustomersLazyRoute = StoreStoreKeyCustomersLazyImport.update(
  {
    path: '/$storeKey/customers',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/customers.lazy').then((d) => d.Route),
)

const StoreStoreKeyCategoriesLazyRoute =
  StoreStoreKeyCategoriesLazyImport.update({
    path: '/$storeKey/categories',
    getParentRoute: () => StoreRoute,
  } as any).lazy(() =>
    import('./routes/store/$storeKey/categories.lazy').then((d) => d.Route),
  )

const StoreStoreKeyBillingLazyRoute = StoreStoreKeyBillingLazyImport.update({
  path: '/$storeKey/billing',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/billing.lazy').then((d) => d.Route),
)

const StoreStoreKeyAnalyticsLazyRoute = StoreStoreKeyAnalyticsLazyImport.update(
  {
    path: '/$storeKey/analytics',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/analytics.lazy').then((d) => d.Route),
)

const StoreStoreKeyShippingRoute = StoreStoreKeyShippingImport.update({
  path: '/$storeKey/shipping',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreKeyLandingRoute = StoreStoreKeyLandingImport.update({
  path: '/$storeKey/landing',
  getParentRoute: () => StoreRoute,
} as any)

const StoreStoreKeySectionCreateRoute = StoreStoreKeySectionCreateImport.update(
  {
    path: '/$storeKey/section/create',
    getParentRoute: () => StoreRoute,
  } as any,
)

const StoreStoreKeyProductsCreateRoute =
  StoreStoreKeyProductsCreateImport.update({
    path: '/$storeKey/products/create',
    getParentRoute: () => StoreRoute,
  } as any)

const StoreStoreKeyFooterCreatepageRoute =
  StoreStoreKeyFooterCreatepageImport.update({
    path: '/$storeKey/footer/createpage',
    getParentRoute: () => StoreRoute,
  } as any)

const StoreStoreKeyOrdersOrderIdIndexRoute =
  StoreStoreKeyOrdersOrderIdIndexImport.update({
    path: '/$storeKey/orders/$orderId/',
    getParentRoute: () => StoreRoute,
  } as any)

const StoreStoreKeyProductsProductIdDetailsLazyRoute =
  StoreStoreKeyProductsProductIdDetailsLazyImport.update({
    path: '/$storeKey/products/$productId/details',
    getParentRoute: () => StoreRoute,
  } as any).lazy(() =>
    import('./routes/store/$storeKey/products_/$productId/details.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/viseditor': {
      preLoaderRoute: typeof ViseditorImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/forgotpassword': {
      preLoaderRoute: typeof ForgotpasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/store/$storeKey/landing': {
      preLoaderRoute: typeof StoreStoreKeyLandingImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/shipping': {
      preLoaderRoute: typeof StoreStoreKeyShippingImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/analytics': {
      preLoaderRoute: typeof StoreStoreKeyAnalyticsLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/billing': {
      preLoaderRoute: typeof StoreStoreKeyBillingLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/categories': {
      preLoaderRoute: typeof StoreStoreKeyCategoriesLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/customers': {
      preLoaderRoute: typeof StoreStoreKeyCustomersLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/dashboard': {
      preLoaderRoute: typeof StoreStoreKeyDashboardLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/domain': {
      preLoaderRoute: typeof StoreStoreKeyDomainLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/email': {
      preLoaderRoute: typeof StoreStoreKeyEmailLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/footer': {
      preLoaderRoute: typeof StoreStoreKeyFooterLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/genlink': {
      preLoaderRoute: typeof StoreStoreKeyGenlinkLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/home': {
      preLoaderRoute: typeof StoreStoreKeyHomeLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/inventory': {
      preLoaderRoute: typeof StoreStoreKeyInventoryLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/media': {
      preLoaderRoute: typeof StoreStoreKeyMediaLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/orders': {
      preLoaderRoute: typeof StoreStoreKeyOrdersLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/payments': {
      preLoaderRoute: typeof StoreStoreKeyPaymentsLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/products': {
      preLoaderRoute: typeof StoreStoreKeyProductsLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/turnstile': {
      preLoaderRoute: typeof StoreStoreKeyTurnstileLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/footer/createpage': {
      preLoaderRoute: typeof StoreStoreKeyFooterCreatepageImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/products/create': {
      preLoaderRoute: typeof StoreStoreKeyProductsCreateImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/section/create': {
      preLoaderRoute: typeof StoreStoreKeySectionCreateImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/products/$productId/details': {
      preLoaderRoute: typeof StoreStoreKeyProductsProductIdDetailsLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/orders/$orderId/': {
      preLoaderRoute: typeof StoreStoreKeyOrdersOrderIdIndexImport
      parentRoute: typeof StoreImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  LoginRoute,
  RegisterRoute,
  StoreRoute.addChildren([
    StoreStoreKeyLandingRoute,
    StoreStoreKeyShippingRoute,
    StoreStoreKeyAnalyticsLazyRoute,
    StoreStoreKeyBillingLazyRoute,
    StoreStoreKeyCategoriesLazyRoute,
    StoreStoreKeyCustomersLazyRoute,
    StoreStoreKeyDashboardLazyRoute,
    StoreStoreKeyDomainLazyRoute,
    StoreStoreKeyEmailLazyRoute,
    StoreStoreKeyFooterLazyRoute,
    StoreStoreKeyGenlinkLazyRoute,
    StoreStoreKeyHomeLazyRoute,
    StoreStoreKeyInventoryLazyRoute,
    StoreStoreKeyMediaLazyRoute,
    StoreStoreKeyOrdersLazyRoute,
    StoreStoreKeyPaymentsLazyRoute,
    StoreStoreKeyProductsLazyRoute,
    StoreStoreKeyTurnstileLazyRoute,
    StoreStoreKeyFooterCreatepageRoute,
    StoreStoreKeyProductsCreateRoute,
    StoreStoreKeySectionCreateRoute,
    StoreStoreKeyProductsProductIdDetailsLazyRoute,
    StoreStoreKeyOrdersOrderIdIndexRoute,
  ]),
  TestRoute,
  ViseditorRoute,
  AboutLazyRoute,
  ForgotpasswordLazyRoute,
])

/* prettier-ignore-end */
