/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreImport } from './routes/store'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const ForgotpasswordLazyImport = createFileRoute('/forgotpassword')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const StoreStoreKeyProductsLazyImport = createFileRoute(
  '/store/$storeKey/products',
)()
const StoreStoreKeyPaymentsLazyImport = createFileRoute(
  '/store/$storeKey/payments',
)()
const StoreStoreKeyOrdersLazyImport = createFileRoute(
  '/store/$storeKey/orders',
)()
const StoreStoreKeyEmailLazyImport = createFileRoute('/store/$storeKey/email')()
const StoreStoreKeyDomainLazyImport = createFileRoute(
  '/store/$storeKey/domain',
)()
const StoreStoreKeyDashboardLazyImport = createFileRoute(
  '/store/$storeKey/dashboard',
)()
const StoreStoreKeyCustomersLazyImport = createFileRoute(
  '/store/$storeKey/customers',
)()
const StoreStoreKeyBillingLazyImport = createFileRoute(
  '/store/$storeKey/billing',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ForgotpasswordLazyRoute = ForgotpasswordLazyImport.update({
  path: '/forgotpassword',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forgotpassword.lazy').then((d) => d.Route),
)

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const StoreRoute = StoreImport.update({
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const StoreStoreKeyProductsLazyRoute = StoreStoreKeyProductsLazyImport.update({
  path: '/$storeKey/products',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/products.lazy').then((d) => d.Route),
)

const StoreStoreKeyPaymentsLazyRoute = StoreStoreKeyPaymentsLazyImport.update({
  path: '/$storeKey/payments',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/payments.lazy').then((d) => d.Route),
)

const StoreStoreKeyOrdersLazyRoute = StoreStoreKeyOrdersLazyImport.update({
  path: '/$storeKey/orders',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/orders.lazy').then((d) => d.Route),
)

const StoreStoreKeyEmailLazyRoute = StoreStoreKeyEmailLazyImport.update({
  path: '/$storeKey/email',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/email.lazy').then((d) => d.Route),
)

const StoreStoreKeyDomainLazyRoute = StoreStoreKeyDomainLazyImport.update({
  path: '/$storeKey/domain',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/domain.lazy').then((d) => d.Route),
)

const StoreStoreKeyDashboardLazyRoute = StoreStoreKeyDashboardLazyImport.update(
  {
    path: '/$storeKey/dashboard',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/dashboard.lazy').then((d) => d.Route),
)

const StoreStoreKeyCustomersLazyRoute = StoreStoreKeyCustomersLazyImport.update(
  {
    path: '/$storeKey/customers',
    getParentRoute: () => StoreRoute,
  } as any,
).lazy(() =>
  import('./routes/store/$storeKey/customers.lazy').then((d) => d.Route),
)

const StoreStoreKeyBillingLazyRoute = StoreStoreKeyBillingLazyImport.update({
  path: '/$storeKey/billing',
  getParentRoute: () => StoreRoute,
} as any).lazy(() =>
  import('./routes/store/$storeKey/billing.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/store': {
      preLoaderRoute: typeof StoreImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/forgotpassword': {
      preLoaderRoute: typeof ForgotpasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/store/$storeKey/billing': {
      preLoaderRoute: typeof StoreStoreKeyBillingLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/customers': {
      preLoaderRoute: typeof StoreStoreKeyCustomersLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/dashboard': {
      preLoaderRoute: typeof StoreStoreKeyDashboardLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/domain': {
      preLoaderRoute: typeof StoreStoreKeyDomainLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/email': {
      preLoaderRoute: typeof StoreStoreKeyEmailLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/orders': {
      preLoaderRoute: typeof StoreStoreKeyOrdersLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/payments': {
      preLoaderRoute: typeof StoreStoreKeyPaymentsLazyImport
      parentRoute: typeof StoreImport
    }
    '/store/$storeKey/products': {
      preLoaderRoute: typeof StoreStoreKeyProductsLazyImport
      parentRoute: typeof StoreImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  StoreRoute.addChildren([
    StoreStoreKeyBillingLazyRoute,
    StoreStoreKeyCustomersLazyRoute,
    StoreStoreKeyDashboardLazyRoute,
    StoreStoreKeyDomainLazyRoute,
    StoreStoreKeyEmailLazyRoute,
    StoreStoreKeyOrdersLazyRoute,
    StoreStoreKeyPaymentsLazyRoute,
    StoreStoreKeyProductsLazyRoute,
  ]),
  AboutLazyRoute,
  ForgotpasswordLazyRoute,
  LoginLazyRoute,
  RegisterLazyRoute,
])

/* prettier-ignore-end */
